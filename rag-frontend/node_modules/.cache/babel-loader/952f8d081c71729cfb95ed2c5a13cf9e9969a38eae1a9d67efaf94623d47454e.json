{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture(_a) {\n  _s();\n  var onPan = _a.onPan,\n    onPanStart = _a.onPanStart,\n    onPanEnd = _a.onPanEnd,\n    onPanSessionStart = _a.onPanSessionStart,\n    visualElement = _a.visualElement;\n  var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n  var panSession = useRef(null);\n  var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n  var handlers = {\n    onSessionStart: onPanSessionStart,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd: function (event, info) {\n      panSession.current = null;\n      onPanEnd && onPanEnd(event, info);\n    }\n  };\n  useEffect(function () {\n    if (panSession.current !== null) {\n      panSession.current.updateHandlers(handlers);\n    }\n  });\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers, {\n      transformPagePoint: transformPagePoint\n    });\n  }\n  usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n  useUnmountEffect(function () {\n    return panSession.current && panSession.current.end();\n  });\n}\n_s(usePanGesture, \"+/79NZcxzgo3rrSTl7GNs0XVYuM=\", false, function () {\n  return [usePointerEvent, useUnmountEffect];\n});\nexport { usePanGesture };","map":{"version":3,"names":["useRef","useContext","useEffect","MotionConfigContext","useUnmountEffect","usePointerEvent","PanSession","usePanGesture","_a","_s","onPan","onPanStart","onPanEnd","onPanSessionStart","visualElement","hasPanEvents","panSession","transformPagePoint","handlers","onSessionStart","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","end"],"sources":["A:/RAG/rag-frontend/src/node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs"],"sourcesContent":["import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture(_a) {\n    var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement = _a.visualElement;\n    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    var panSession = useRef(null);\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: function (event, info) {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    useEffect(function () {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint: transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(function () { return panSession.current && panSession.current.end(); });\n}\n\nexport { usePanGesture };\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACrD,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,eAAe,QAAQ,iCAAiC;AACjE,SAASC,UAAU,QAAQ,kBAAkB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,EAAE,EAAE;EAAAC,EAAA;EACvB,IAAIC,KAAK,GAAGF,EAAE,CAACE,KAAK;IAAEC,UAAU,GAAGH,EAAE,CAACG,UAAU;IAAEC,QAAQ,GAAGJ,EAAE,CAACI,QAAQ;IAAEC,iBAAiB,GAAGL,EAAE,CAACK,iBAAiB;IAAEC,aAAa,GAAGN,EAAE,CAACM,aAAa;EACpJ,IAAIC,YAAY,GAAGL,KAAK,IAAIC,UAAU,IAAIC,QAAQ,IAAIC,iBAAiB;EACvE,IAAIG,UAAU,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAC7B,IAAIiB,kBAAkB,GAAGhB,UAAU,CAACE,mBAAmB,CAAC,CAACc,kBAAkB;EAC3E,IAAIC,QAAQ,GAAG;IACXC,cAAc,EAAEN,iBAAiB;IACjCO,OAAO,EAAET,UAAU;IACnBU,MAAM,EAAEX,KAAK;IACbY,KAAK,EAAE,SAAAA,CAAUC,KAAK,EAAEC,IAAI,EAAE;MAC1BR,UAAU,CAACS,OAAO,GAAG,IAAI;MACzBb,QAAQ,IAAIA,QAAQ,CAACW,KAAK,EAAEC,IAAI,CAAC;IACrC;EACJ,CAAC;EACDtB,SAAS,CAAC,YAAY;IAClB,IAAIc,UAAU,CAACS,OAAO,KAAK,IAAI,EAAE;MAC7BT,UAAU,CAACS,OAAO,CAACC,cAAc,CAACR,QAAQ,CAAC;IAC/C;EACJ,CAAC,CAAC;EACF,SAASS,aAAaA,CAACJ,KAAK,EAAE;IAC1BP,UAAU,CAACS,OAAO,GAAG,IAAInB,UAAU,CAACiB,KAAK,EAAEL,QAAQ,EAAE;MACjDD,kBAAkB,EAAEA;IACxB,CAAC,CAAC;EACN;EACAZ,eAAe,CAACS,aAAa,EAAE,aAAa,EAAEC,YAAY,IAAIY,aAAa,CAAC;EAC5EvB,gBAAgB,CAAC,YAAY;IAAE,OAAOY,UAAU,CAACS,OAAO,IAAIT,UAAU,CAACS,OAAO,CAACG,GAAG,CAAC,CAAC;EAAE,CAAC,CAAC;AAC5F;AAACnB,EAAA,CA1BQF,aAAa;EAAA,QAwBlBF,eAAe,EACfD,gBAAgB;AAAA;AAGpB,SAASG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}