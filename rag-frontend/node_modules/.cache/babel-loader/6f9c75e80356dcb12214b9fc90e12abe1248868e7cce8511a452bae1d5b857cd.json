{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useConstant } from './use-constant.mjs';\nvar counter = 0;\nvar incrementId = function () {\n  return counter++;\n};\nvar useId = function () {\n  _s();\n  return useConstant(incrementId);\n};\n/**\n * Ideally we'd use the following code to support React 18 optionally.\n * But this fairly fails in Webpack (otherwise treeshaking wouldn't work at all).\n * Need to come up with a different way of figuring this out.\n */\n// export const useId = (React as any).useId\n//     ? (React as any).useId\n//     : () => useConstant(incrementId)\n_s(useId, \"6Hotjiq5jReIayUUDmjTUZRF2W0=\", false, function () {\n  return [useConstant];\n});\nexport { useId };","map":{"version":3,"names":["useConstant","counter","incrementId","useId","_s"],"sources":["A:/RAG/rag-frontend/src/node_modules/framer-motion/dist/es/utils/use-id.mjs"],"sourcesContent":["import { useConstant } from './use-constant.mjs';\n\nvar counter = 0;\nvar incrementId = function () { return counter++; };\nvar useId = function () { return useConstant(incrementId); };\n/**\n * Ideally we'd use the following code to support React 18 optionally.\n * But this fairly fails in Webpack (otherwise treeshaking wouldn't work at all).\n * Need to come up with a different way of figuring this out.\n */\n// export const useId = (React as any).useId\n//     ? (React as any).useId\n//     : () => useConstant(incrementId)\n\nexport { useId };\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,oBAAoB;AAEhD,IAAIC,OAAO,GAAG,CAAC;AACf,IAAIC,WAAW,GAAG,SAAAA,CAAA,EAAY;EAAE,OAAOD,OAAO,EAAE;AAAE,CAAC;AACnD,IAAIE,KAAK,GAAG,SAAAA,CAAA,EAAY;EAAAC,EAAA;EAAE,OAAOJ,WAAW,CAACE,WAAW,CAAC;AAAE,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAE,EAAA,CARID,KAAK;EAAA,QAAwBH,WAAW;AAAA;AAU5C,SAASG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}